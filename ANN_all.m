function [Y,Xf,Af] = ANN_all(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 27-Jul-2018 18:14:30.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2 3 4 5];
x1_step2.xoffset = [1;1;1;1;1];
x1_step2.gain = [2;2;2;2;2];
x1_step2.ymin = -1;

% Layer 1
b1 = [0.056275568340987673632;0.22775951112215755967;0.03613543872463482326;0.058476477405979429558;0.057562074996420166395;0.035548753161964638525;-0.040452074621487810191];
IW1_1 = [0.029046544346561477962 0.024083550359929640355 0.046526969704602877398 0.072178012308453193269 0.014769539853734664492;0.20591182000076194147 -0.0076375541412641786976 0.2794616285938377187 0.28720403182825093857 0.17104227608346081468;0.018924283613582094932 0.016137384238922334451 0.028672675663609800689 0.046350012099016235645 0.0084846846048314220751;0.030045508301971470683 0.024681516966466254814 0.048965909960728380701 0.075001103651178305243 0.015863092266750752207;0.029568402926067337971 0.024293401404165283763 0.048200570095029739159 0.073825979969083577181 0.015610969009636271529;0.01861312084971154801 0.01586851068132453732 0.028219051616850936853 0.045597142494219831954 0.0083560132940264496976;-0.021119638150592371512 -0.017919418375189118814 -0.032354154018833007622 -0.051883712841375814739 -0.0097065967906346441868];

% Layer 2
b2 = -0.52156128025208159382;
LW2_1 = [-0.1135176442957837456 -0.51144875569877457089 -0.070298703991655525636 -0.12394129500119512033 -0.12381032898428331879 -0.070821609212353781038 0.080190098075162946634];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0429184549356223;
y1_step1.xoffset = 0.0166666666666667;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
